#In this version you can make your own database.

db = {
'a':"xP^ALc35Haj$Zfdv+G9beXmB>rDV#%YyFTEpXJu~76q4vhg9!k",
'b':"p^u%&DaB6SCzQ39!ddM4W2twN#s$L>nhJTKrvGYXfbVA&59MqU",
'c':"EhUDJcFZLTNKCSWd#M#6XfNR?ApsBuzd%$3t+QV52ya9vPk@7j",
'd':"4TRbAKJKXB!3tfcF~zBsnWV%D@YeZ?dD>H3hywv#gujd9aP8&x",
'e':"5bMVpuL?Gr%f&DNBaPK2cyRvwYgs$t@>x4ZS5nXUQ$H#^T6Jk8",
'f':"MS^KF>Cz8Z~UDbAHD4xBLrg3fndq5mud?&X#JT6!Rv%c7tj2Y9",
'g':"Sw~mx#b8K?55UFenRaH@WJgG!rts7fqT9rzAcVN4Z3d+uQ$?6M",
'h':"phnKeVJT%EGx6qc7rSR!L3A64Dj#~d@Y9B5f^HNCzPXvdW#QDs",
'i':"Y9~Ev2khnDUNF!N?qgub>Zm&Hp%de5^KSQC@DWdM&VA#f9atL+",
'j':"xHADc~XrdS8ybJPVC!nZ9eg6UN!D4F^5Y&k%TM$Z#dhL7GB?+K",
'k':"Yd5>nE?vubsDNHm#qGR^8mwKd9cB$%rtCW&&X6zS7JMAgATf27",
'l':"VqB!n?8E3tAyH7~+&$>pDhc9g@K5duGKXN!UjW#4kxM2vXRCD6",
'm':"7H?XpAgwQYW5qURzJVvjNaDBP~dfWnK8ehDktT5c4?r#2x@L9b",
'n':"vn7KsDCe%mJdv~L?9~P34Pp$wdh&2r!UN>7fxgbYuyGETZVSk@",
'o':">k^D4uFe?%N3J2K4dx8LsDHSgT7^XyvAYd59hUzP#Z6BCjpq~&",
'p':"?PZk2ERXLr7qNUhY6$G974jC5T>%BKgSa&M~A!QDdxvsUcb~ut",
'q':"esLMfQk~E!!>JpWm4LHY6$Sht&PCvFqx+DUc?db2nagZ8#DNRB",
'r':"@5aWNzZYw6Urx7>LmHPuBMFsQ#5jR4+!pb@AvDd2KetN&3~98h",
's':"dTrCe~M48^%62DbNUHBqgvHsyDQVY$f?Hz7taxG#+cEwKkZ7%p",
't':"dp@2mkYwC9Pr#DTDb~jnaUEQHG^L^K54MJBA7S5WNxgv%qC!R8",
'u':">+pgwELWAt2DVm5L#NKF4dhujDx9kCs~ne68Mv@!qby4Q&a%Z>",
'v':"zrEYdnEKvwsS4VQ7ap2#W$@2>eDkcp>buxd8ym5fh?!6qAgj+Z",
'w':"e@HNb8LDS7?wu4crYgd~#Z$>J6W5!^92R3nGXFWJ%dm+vKAzTC",
'x':"LfUyK2FbNq8xdwhYCX6&ABRT3HQc9J4&D#eEvTZpMdS?6~5Vgu",
'y':"&WMnaN3kAPVe74K9qfG+uF5?Zrt6x2Y%w+zb^c#L>ghmB@S7HZ",
'z':"8dHLxn~@Ps#yRAcaQTgB$d2!5NDVh+%69Y7%fVK3eJ4XUz9Z3D",
' ':"6AzvwKm!tMF4>xj2tq~77S$3dCH~Dr#bkNXJn@Z%RhTBsUW^ZP",
'0':"&V6#H85@YFA+GMN3aK4uT%R7~pPth6jWDL9^z2ErCgSxak>n!y",
'1':"wJ~Uv5nj2Ef6#dS>CQqrz!xGE^mK@Pc%MbyH>3+tN7gJW$LAph",
'2':"Cd~W5ua%esT83Pc#6X$U4fGzmv+rMbD5wF6hZ9>WgNpk?^HK7#",
'3':"^sh>mEZ6k!T%5jvHcCnP98URMxuWX4AF@a7?gL^>&yG+wDYq$V",
'4':"Sy249#?rtaWJ!4++AGpK7zV%YdZ^>CTscbNU5XD&?NfekPL6M3",
'5':"DhVzk!H4#E5RC3Qcv58>t?9upYB+G$Z&rD^ab+%qddeF7AySmn",
'6':"ZUmSj~xX#ctEuhdeF%6QW5D9+TqPQs$9K@HpGXdbM^RzJY!vr?",
'7':"CMXg%YDJ>Q^Wf~3mVPy2p9AwvT&RGceuE!8TBLb?#D+r5ZF8Bs",
'8':"j@7B^urWz5ryD+9ZcaXxmGdU#dhbqLC?f~S&+tMQ6V$PKswJ>8",
'9':"+kwMgJqE^rtL6V~@Bh?ZjTdGCbx!K4N$&9DYnpSDev$#2F3zRQ",
'.':"7ymV#aDZY&nThLpN?cxKGqdXS^v4J$xe&f@jHYD2Cu6RUF35r+",
',':"~maj^TdKfQAUWdJv>MB5&2zXVcHbLst%q8y#3EgD+h%$F5p4u#",
'!':"Nh#yt4UkM+>3c%G4&DJSQzVE2?mT6ZXDu?B8dLxRw@WAgA^spF",
'?':"VfCLDp+yYTmQ&@q#jx!B4Zz7aW%ecthKw923LAP8HsS?drg%$R",
}

def encode(string):
    out = str();
    for i in string:
        if(i.lower() in db):
            out+=db[i];
    return(out);

def search(list,search_age):
    for name,age in list.items():
        if age == search_age:
            return name

def decode(string):
    split = lambda x, n: [x[i:i+n] for i in range(0, len(x), n)];
    string = split(string,50);
    out = str();
    for i in string:
        if(i in db.values()):
            out+=search(db,i);
    return(out);

while True:
    In = str(input("Insira uma string para codificar:\n"))
    print(encode(In));
    In = str(input("\n\n\nInsira uma string para decodificar:\n"))
    print("\n\n\nDecodificado com sucesso! Saida:\n"+decode(In));
